//Write a menu driven program to sort a list of elements in ascending 
//order using Insertion Sort technique
//Sample Input from file:
//MAIN MENU (INSERTION SORT)
//1. Ascending Data
//2. Descending Data
//3. Random Data
//4. ERROR (EXIT)

#include <stdio.h>

void insertionSort(int arr[], int size, int *comparisons) {
    for (int i = 1; i < size; i++) {
        int key = arr[i];
        int j = i - 1;

        while (j >= 0 && arr[j] > key) {
            arr[j + 1] = arr[j];
            (*comparisons)++; // Increment comparison count
            j--;
        }
        arr[j + 1] = key;
    }
}

void displayArray(int arr[], int size) {
    for (int i = 0; i < size; i++) {
        printf("%d ", arr[i]);
    }
    printf("\n");
}

int main() {
    int choice;

    while (1) {
        printf("MAIN MENU (INSERTION SORT)\n");
        printf("1. Ascending Data\n");
        printf("2. Descending Data\n");
        printf("3. Random Data\n");
        printf("4. EXIT\n");
        printf("Enter option: ");
        scanf("%d", &choice);

        if (choice == 4) {
            break;
        }

        char *inputFileName, *outputFileName;

        if (choice == 1) {
            inputFileName = "inAsce.txt";
            outputFileName = "outAsce.txt";
        } else if (choice == 2) {
            inputFileName = "inDesc.txt";
            outputFileName = "outDesc.txt";
        } else if (choice == 3) {
            inputFileName = "inRand.txt";
            outputFileName = "outRand.txt";
        } else {
            printf("Invalid choice.\n");
            continue;
        }

        FILE *inputFile = fopen(inputFileName, "r");
        FILE *outputFile = fopen(outputFileName, "w");

        if (inputFile == NULL || outputFile == NULL) {
            printf("Error opening files.\n");
            continue;
        }

        int size;
        printf("enter the size of the array\n");
        scanf("%d",&size);
        int arr[size];
        int comparisons = 0;

        for (int i = 0; i < size; i++) {
            fscanf(inputFile, "%d", &arr[i]);
        }

        printf("Before Sorting: ");
        displayArray(arr, size);

        insertionSort(arr, size, &comparisons);

        printf("After Sorting: ");
        displayArray(arr, size);
        printf("Number of Comparisons: %d\n", comparisons);

        if (comparisons == (size - 1)) {
            printf("Scenario: Best-case\n");
        } else if (comparisons == (size * (size - 1) / 2)) {
            printf("Scenario: Worst-case\n");
        } else {
            printf("Scenario: Neither best nor worst-case\n");
        }

        for (int i = 0; i < size; i++) {
            fprintf(outputFile, "%d ", arr[i]);
        }

        fclose(inputFile);
        fclose(outputFile);
    }

    return 0;
}
